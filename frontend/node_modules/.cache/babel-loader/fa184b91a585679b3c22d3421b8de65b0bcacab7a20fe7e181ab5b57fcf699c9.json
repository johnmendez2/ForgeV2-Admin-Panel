{"ast":null,"code":"var _jsxFileName = \"/Users/gk/Downloads/ForgeV2-Admin-Panel/frontend/src/components/AdminPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from 'react';\nimport './AdminPanel.css';\nimport FinancialsPanel from './FinancialsPanel';\nimport StatisticsPanel from './StatisticsPanel';\nimport TemplatesPanel from './TemplatesPanel';\nimport UserManagementPanel from './UserManagementPanel';\nimport DownloadButton, { DownloadIcon } from './DownloadButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = 'http://localhost:8000';\nconst TABLES = ['account', 'templates', 'session', 'subscription', 'user', 'user_stats', 'workflow', 'workspace', 'workspace_invitation'];\n\n// CSV utility\nconst toCSV = rows => {\n  if (!rows || !rows.length) return '';\n  const headers = Object.keys(rows[0]);\n  const escape = val => {\n    if (val == null) return '';\n    const s = String(val).replaceAll('\"', '\"\"');\n    return `\"${s}\"`;\n  };\n  return [headers.map(h => `\"${h}\"`).join(','), ...rows.map(r => headers.map(h => escape(r[h])).join(','))].join('\\n');\n};\nconst downloadCSV = (filename, rows) => {\n  const csv = toCSV(rows);\n  const blob = new Blob([csv], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  URL.revokeObjectURL(url);\n};\nconst fetchAllData = async () => {\n  const results = {};\n  await Promise.all(TABLES.map(async table => {\n    try {\n      const res = await fetch(`${BASE_URL}/data/${table}`);\n      if (!res.ok) {\n        const text = await res.text();\n        throw new Error(`${table} fetch failed: ${res.status} ${text}`);\n      }\n      const json = await res.json();\n      results[table] = json.data || [];\n    } catch (e) {\n      console.error(`Error fetching ${table}:`, e);\n      results[table] = [];\n    }\n  }));\n  return results;\n};\nconst buildUserRows = data => {\n  const users = Array.isArray(data.user) ? data.user : [];\n  const stats = Array.isArray(data.user_stats) ? data.user_stats : [];\n  const subs = Array.isArray(data.subscription) ? data.subscription : [];\n  const statsByUser = Object.fromEntries(stats.map(s => [s.user_id, s]));\n  const subByUser = Object.fromEntries(subs.map(s => [s.reference_id, s]));\n  return users.map(u => ({\n    user: u,\n    stats: statsByUser[u.id] || {},\n    subscription: subByUser[u.id] || {}\n  }));\n};\nconst aggregateStats = (arr = []) => arr.reduce((acc, s) => {\n  if (!s) return acc;\n  acc.total_manual_executions += s.total_manual_executions || 0;\n  acc.total_api_calls += s.total_api_calls || 0;\n  acc.total_webhook_triggers += s.total_webhook_triggers || 0;\n  acc.total_scheduled_executions += s.total_scheduled_executions || 0;\n  acc.total_tokens_used += s.total_tokens_used || 0;\n  acc.total_chat_executions += s.total_chat_executions || 0;\n  acc.total_cost += s.total_cost || 0;\n  return acc;\n}, {\n  total_manual_executions: 0,\n  total_api_calls: 0,\n  total_webhook_triggers: 0,\n  total_scheduled_executions: 0,\n  total_tokens_used: 0,\n  total_chat_executions: 0,\n  total_cost: 0\n});\nconst countByPlan = (subs = [], plan) => subs.filter(s => s.plan === plan).length;\nconst filterByStatus = (subs = [], status) => subs.filter(s => s.status === status && s.stripe_customer_id);\nconst sections = [{\n  name: 'Financials',\n  key: 'financials'\n}, {\n  name: 'Statistics',\n  key: 'statistics'\n}, {\n  name: 'Templates',\n  key: 'templates_list'\n}, {\n  name: 'User Database',\n  key: 'user_management'\n}];\nexport default function AdminPanel() {\n  _s();\n  var _sections$find;\n  const [data, setData] = useState({});\n  const [userRows, setUserRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentSection, setCurrentSection] = useState(sections[0].key);\n  const [sortConfig, setSortConfig] = useState({\n    table: null,\n    key: null,\n    direction: null\n  });\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const d = await fetchAllData();\n      setData(d);\n      setUserRows(buildUserRows(d));\n      setLoading(false);\n    })();\n  }, []);\n\n  // Derived\n  const subscriptions = data.subscription || [];\n  const userStatsArray = data.user_stats || [];\n  const templates = data.templates || [];\n  const aggregated = aggregateStats(userStatsArray);\n  const proCount = countByPlan(subscriptions, 'pro');\n  const teamCount = countByPlan(subscriptions, 'team');\n  const estimatedRevenue = proCount * 20 + teamCount * 40;\n  const userById = Object.fromEntries((data.user || []).map(u => [u.id, u]));\n  const activeSubsRaw = filterByStatus(subscriptions, 'active');\n  const incompleteSubsRaw = filterByStatus(subscriptions, 'incomplete');\n  const activeEmails = new Set(activeSubsRaw.map(s => {\n    var _userById$s$reference;\n    return (_userById$s$reference = userById[s.reference_id]) === null || _userById$s$reference === void 0 ? void 0 : _userById$s$reference.email;\n  }).filter(Boolean));\n  const incompleteSubs = incompleteSubsRaw.filter(s => {\n    var _userById$s$reference2;\n    return !activeEmails.has((_userById$s$reference2 = userById[s.reference_id]) === null || _userById$s$reference2 === void 0 ? void 0 : _userById$s$reference2.email);\n  });\n\n  // CSV rows\n  const userManagementRows = userRows.map(({\n    user,\n    stats,\n    subscription\n  }) => ({\n    user_id: user.id,\n    name: user.name,\n    email: user.email,\n    email_verified: user.email_verified ? 'Yes' : 'No',\n    created_at: user.created_at,\n    plan: subscription.plan,\n    subscription_status: subscription.status,\n    total_api_calls: stats.total_api_calls,\n    total_cost: stats.total_cost,\n    total_manual_executions: stats.total_manual_executions,\n    total_webhook_triggers: stats.total_webhook_triggers,\n    total_scheduled_executions: stats.total_scheduled_executions,\n    total_tokens_used: stats.total_tokens_used,\n    total_chat_executions: stats.total_chat_executions,\n    current_usage_limit: stats.current_usage_limit,\n    usage_limit_updated_at: stats.usage_limit_updated_at,\n    current_period_cost: stats.current_period_cost,\n    last_period_cost: stats.last_period_cost,\n    last_active: stats.last_active,\n    seats: subscription.seats\n  }));\n  const allSubsRows = subscriptions.map(s => {\n    var _userById$s$reference3;\n    return {\n      subscription_id: s.id,\n      plan: s.plan,\n      status: s.status,\n      stripe_customer_id: s.stripe_customer_id,\n      stripe_subscription_id: s.stripe_subscription_id,\n      user_email: (_userById$s$reference3 = userById[s.reference_id]) === null || _userById$s$reference3 === void 0 ? void 0 : _userById$s$reference3.email,\n      period_start: s.period_start,\n      period_end: s.period_end,\n      cancel_at_period_end: s.cancel_at_period_end ? 'Yes' : 'No',\n      seats: s.seats\n    };\n  });\n  const activeSubsRows = activeSubsRaw.map(s => {\n    var _userById$s$reference4;\n    return {\n      ...s,\n      user_email: (_userById$s$reference4 = userById[s.reference_id]) === null || _userById$s$reference4 === void 0 ? void 0 : _userById$s$reference4.email\n    };\n  });\n  const incompleteSubsRows = incompleteSubs.map(s => {\n    var _userById$s$reference5;\n    return {\n      ...s,\n      user_email: (_userById$s$reference5 = userById[s.reference_id]) === null || _userById$s$reference5 === void 0 ? void 0 : _userById$s$reference5.email\n    };\n  });\n\n  // Sorting\n  const handleSort = (table, key) => setSortConfig(prev => {\n    if (prev.table !== table || prev.key !== key) return {\n      table,\n      key,\n      direction: 'asc'\n    };\n    if (prev.direction === 'asc') return {\n      table,\n      key,\n      direction: 'desc'\n    };\n    return {\n      table: null,\n      key: null,\n      direction: null\n    };\n  });\n  const sortIndicator = (table, key) => {\n    if (sortConfig.table === table && sortConfig.key === key) {\n      return sortConfig.direction === 'asc' ? ' ▲' : ' ▼';\n    }\n    return '';\n  };\n  const sortData = (arr, key, dir) => {\n    if (!key || !dir) return arr;\n    return [...arr].sort((a, b) => {\n      var _a$key, _b$key;\n      let av = (_a$key = a[key]) !== null && _a$key !== void 0 ? _a$key : '';\n      let bv = (_b$key = b[key]) !== null && _b$key !== void 0 ? _b$key : '';\n      const aN = parseFloat(av),\n        bN = parseFloat(bv);\n      const bothNum = !isNaN(aN) && !isNaN(bN);\n      let cmp = bothNum ? aN - bN : String(av).localeCompare(String(bv), undefined, {\n        numeric: true\n      });\n      if (cmp === 0) return 0;\n      return dir === 'asc' ? cmp < 0 ? -1 : 1 : cmp < 0 ? 1 : -1;\n    });\n  };\n  const sortedUserRows = useMemo(() => sortConfig.table === 'user_management' ? sortData(userManagementRows, sortConfig.key, sortConfig.direction).map(r => ({\n    user: {\n      id: r.user_id,\n      name: r.name,\n      email: r.email,\n      created_at: r.created_at,\n      email_verified: r.email_verified === 'Yes'\n    },\n    stats: r,\n    subscription: r\n  })) : userRows, [sortConfig, userRows]);\n  const sortedAllSubs = useMemo(() => sortConfig.table === 'all_subs' ? sortData(allSubsRows, sortConfig.key, sortConfig.direction) : allSubsRows, [sortConfig, allSubsRows]);\n  const sortedActiveSubsFinal = useMemo(() => sortConfig.table === 'active_subs' ? sortData(activeSubsRows, sortConfig.key, sortConfig.direction) : activeSubsRows, [sortConfig, activeSubsRows]);\n  const sortedIncompleteSubsFinal = useMemo(() => sortConfig.table === 'incomplete_subs' ? sortData(incompleteSubsRows, sortConfig.key, sortConfig.direction) : incompleteSubsRows, [sortConfig, incompleteSubsRows]);\n  const title = ((_sections$find = sections.find(s => s.key === currentSection)) === null || _sections$find === void 0 ? void 0 : _sections$find.name) || '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"brand\",\n        children: \"Forge v2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav\",\n        children: sections.map(s => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `sidebar-item${currentSection === s.key ? ' active' : ''}`,\n          onClick: () => setCurrentSection(s.key),\n          children: s.name\n        }, s.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topbar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"content\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: \"Loading data\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this) : currentSection === 'financials' ? /*#__PURE__*/_jsxDEV(FinancialsPanel, {\n          subscriptions: allSubsRows,\n          userById: userById,\n          aggregated: aggregated,\n          proCount: proCount,\n          teamCount: teamCount,\n          estimatedRevenue: estimatedRevenue,\n          handleSort: handleSort,\n          sortIndicator: sortIndicator,\n          sortedActiveSubs: sortedActiveSubsFinal,\n          sortedIncompleteSubs: sortedIncompleteSubsFinal,\n          onDownloadAll: () => downloadCSV('subscriptions.csv', allSubsRows),\n          onDownloadActive: () => downloadCSV('active_subscriptions.csv', activeSubsRows),\n          onDownloadIncomplete: () => downloadCSV('incomplete_subscriptions.csv', incompleteSubsRows)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this) : currentSection === 'statistics' ? /*#__PURE__*/_jsxDEV(StatisticsPanel, {\n          data: data,\n          aggregated: aggregated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this) : currentSection === 'templates_list' ? /*#__PURE__*/_jsxDEV(TemplatesPanel, {\n          templates: templates,\n          userById: userById\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(UserManagementPanel, {\n          sortedUserRows: sortedUserRows,\n          handleSort: handleSort,\n          sortIndicator: sortIndicator,\n          onDownloadUsers: () => downloadCSV('users.csv', userManagementRows)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminPanel, \"PK6vtoocE5yjRTf+qF/MTFeXjAE=\");\n_c = AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","FinancialsPanel","StatisticsPanel","TemplatesPanel","UserManagementPanel","DownloadButton","DownloadIcon","jsxDEV","_jsxDEV","BASE_URL","TABLES","toCSV","rows","length","headers","Object","keys","escape","val","s","String","replaceAll","map","h","join","r","downloadCSV","filename","csv","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","fetchAllData","results","Promise","all","table","res","fetch","ok","text","Error","status","json","data","e","console","error","buildUserRows","users","Array","isArray","user","stats","user_stats","subs","subscription","statsByUser","fromEntries","user_id","subByUser","reference_id","u","id","aggregateStats","arr","reduce","acc","total_manual_executions","total_api_calls","total_webhook_triggers","total_scheduled_executions","total_tokens_used","total_chat_executions","total_cost","countByPlan","plan","filter","filterByStatus","stripe_customer_id","sections","name","key","AdminPanel","_s","_sections$find","setData","userRows","setUserRows","loading","setLoading","currentSection","setCurrentSection","sortConfig","setSortConfig","direction","d","subscriptions","userStatsArray","templates","aggregated","proCount","teamCount","estimatedRevenue","userById","activeSubsRaw","incompleteSubsRaw","activeEmails","Set","_userById$s$reference","email","Boolean","incompleteSubs","_userById$s$reference2","has","userManagementRows","email_verified","created_at","subscription_status","current_usage_limit","usage_limit_updated_at","current_period_cost","last_period_cost","last_active","seats","allSubsRows","_userById$s$reference3","subscription_id","stripe_subscription_id","user_email","period_start","period_end","cancel_at_period_end","activeSubsRows","_userById$s$reference4","incompleteSubsRows","_userById$s$reference5","handleSort","prev","sortIndicator","sortData","dir","sort","b","_a$key","_b$key","av","bv","aN","parseFloat","bN","bothNum","isNaN","cmp","localeCompare","undefined","numeric","sortedUserRows","sortedAllSubs","sortedActiveSubsFinal","sortedIncompleteSubsFinal","title","find","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","sortedActiveSubs","sortedIncompleteSubs","onDownloadAll","onDownloadActive","onDownloadIncomplete","onDownloadUsers","_c","$RefreshReg$"],"sources":["/Users/gk/Downloads/ForgeV2-Admin-Panel/frontend/src/components/AdminPanel.jsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\r\nimport './AdminPanel.css';\r\n\r\nimport FinancialsPanel from './FinancialsPanel';\r\nimport StatisticsPanel from './StatisticsPanel';\r\nimport TemplatesPanel from './TemplatesPanel';\r\nimport UserManagementPanel from './UserManagementPanel';\r\nimport DownloadButton, { DownloadIcon } from './DownloadButton';\r\n\r\nconst BASE_URL = 'http://localhost:8000';\r\nconst TABLES = [\r\n  'account',\r\n  'templates',\r\n  'session',\r\n  'subscription',\r\n  'user',\r\n  'user_stats',\r\n  'workflow',\r\n  'workspace',\r\n  'workspace_invitation',\r\n];\r\n\r\n// CSV utility\r\nconst toCSV = (rows) => {\r\n  if (!rows || !rows.length) return '';\r\n  const headers = Object.keys(rows[0]);\r\n  const escape = (val) => {\r\n    if (val == null) return '';\r\n    const s = String(val).replaceAll('\"', '\"\"');\r\n    return `\"${s}\"`;\r\n  };\r\n  return [\r\n    headers.map((h) => `\"${h}\"`).join(','),\r\n    ...rows.map((r) => headers.map((h) => escape(r[h])).join(',')),\r\n  ].join('\\n');\r\n};\r\n\r\nconst downloadCSV = (filename, rows) => {\r\n  const csv = toCSV(rows);\r\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = filename;\r\n  a.click();\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\nconst fetchAllData = async () => {\r\n  const results = {};\r\n  await Promise.all(\r\n    TABLES.map(async (table) => {\r\n      try {\r\n        const res = await fetch(`${BASE_URL}/data/${table}`);\r\n        if (!res.ok) {\r\n          const text = await res.text();\r\n          throw new Error(`${table} fetch failed: ${res.status} ${text}`);\r\n        }\r\n        const json = await res.json();\r\n        results[table] = json.data || [];\r\n      } catch (e) {\r\n        console.error(`Error fetching ${table}:`, e);\r\n        results[table] = [];\r\n      }\r\n    })\r\n  );\r\n  return results;\r\n};\r\n\r\nconst buildUserRows = (data) => {\r\n  const users = Array.isArray(data.user) ? data.user : [];\r\n  const stats = Array.isArray(data.user_stats) ? data.user_stats : [];\r\n  const subs  = Array.isArray(data.subscription) ? data.subscription : [];\r\n\r\n  const statsByUser = Object.fromEntries(stats.map((s) => [s.user_id, s]));\r\n  const subByUser   = Object.fromEntries(subs.map((s) => [s.reference_id, s]));\r\n\r\n  return users.map((u) => ({\r\n    user: u,\r\n    stats: statsByUser[u.id] || {},\r\n    subscription: subByUser[u.id] || {},\r\n  }));\r\n};\r\n\r\nconst aggregateStats = (arr = []) =>\r\n  arr.reduce(\r\n    (acc, s) => {\r\n      if (!s) return acc;\r\n      acc.total_manual_executions   += s.total_manual_executions   || 0;\r\n      acc.total_api_calls           += s.total_api_calls           || 0;\r\n      acc.total_webhook_triggers    += s.total_webhook_triggers    || 0;\r\n      acc.total_scheduled_executions+= s.total_scheduled_executions|| 0;\r\n      acc.total_tokens_used         += s.total_tokens_used         || 0;\r\n      acc.total_chat_executions     += s.total_chat_executions     || 0;\r\n      acc.total_cost                += s.total_cost                || 0;\r\n      return acc;\r\n    },\r\n    {\r\n      total_manual_executions: 0,\r\n      total_api_calls: 0,\r\n      total_webhook_triggers: 0,\r\n      total_scheduled_executions: 0,\r\n      total_tokens_used: 0,\r\n      total_chat_executions: 0,\r\n      total_cost: 0,\r\n    }\r\n  );\r\n\r\nconst countByPlan = (subs = [], plan) => subs.filter((s) => s.plan === plan).length;\r\nconst filterByStatus = (subs = [], status) => subs.filter((s) => s.status === status && s.stripe_customer_id);\r\n\r\nconst sections = [\r\n  { name: 'Financials',        key: 'financials'       },\r\n  { name: 'Statistics',        key: 'statistics'       },\r\n  { name: 'Templates',         key: 'templates_list'   },\r\n  { name: 'User Database',     key: 'user_management'  },\r\n];\r\n\r\nexport default function AdminPanel() {\r\n  const [data, setData]             = useState({});\r\n  const [userRows, setUserRows]     = useState([]);\r\n  const [loading, setLoading]       = useState(true);\r\n  const [currentSection, setCurrentSection] = useState(sections[0].key);\r\n  const [sortConfig, setSortConfig] = useState({ table: null, key: null, direction: null });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setLoading(true);\r\n      const d = await fetchAllData();\r\n      setData(d);\r\n      setUserRows(buildUserRows(d));\r\n      setLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  // Derived\r\n  const subscriptions    = data.subscription || [];\r\n  const userStatsArray   = data.user_stats   || [];\r\n  const templates        = data.templates    || [];\r\n  const aggregated       = aggregateStats(userStatsArray);\r\n  const proCount         = countByPlan(subscriptions, 'pro');\r\n  const teamCount        = countByPlan(subscriptions, 'team');\r\n  const estimatedRevenue= proCount * 20 + teamCount * 40;\r\n  const userById         = Object.fromEntries((data.user||[]).map((u) => [u.id, u]));\r\n\r\n  const activeSubsRaw     = filterByStatus(subscriptions, 'active');\r\n  const incompleteSubsRaw = filterByStatus(subscriptions, 'incomplete');\r\n  const activeEmails      = new Set(activeSubsRaw.map((s) => userById[s.reference_id]?.email).filter(Boolean));\r\n  const incompleteSubs    = incompleteSubsRaw.filter((s) => !activeEmails.has(userById[s.reference_id]?.email));\r\n\r\n  // CSV rows\r\n  const userManagementRows = userRows.map(({ user, stats, subscription }) => ({\r\n    user_id: user.id,\r\n    name: user.name,\r\n    email: user.email,\r\n    email_verified: user.email_verified ? 'Yes' : 'No',\r\n    created_at: user.created_at,\r\n    plan: subscription.plan,\r\n    subscription_status: subscription.status,\r\n    total_api_calls: stats.total_api_calls,\r\n    total_cost: stats.total_cost,\r\n    total_manual_executions: stats.total_manual_executions,\r\n    total_webhook_triggers: stats.total_webhook_triggers,\r\n    total_scheduled_executions: stats.total_scheduled_executions,\r\n    total_tokens_used: stats.total_tokens_used,\r\n    total_chat_executions: stats.total_chat_executions,\r\n    current_usage_limit: stats.current_usage_limit,\r\n    usage_limit_updated_at: stats.usage_limit_updated_at,\r\n    current_period_cost: stats.current_period_cost,\r\n    last_period_cost: stats.last_period_cost,\r\n    last_active: stats.last_active,\r\n    seats: subscription.seats,\r\n  }));\r\n\r\n  const allSubsRows       = subscriptions.map((s) => ({\r\n    subscription_id: s.id,\r\n    plan: s.plan,\r\n    status: s.status,\r\n    stripe_customer_id: s.stripe_customer_id,\r\n    stripe_subscription_id: s.stripe_subscription_id,\r\n    user_email: userById[s.reference_id]?.email,\r\n    period_start: s.period_start,\r\n    period_end: s.period_end,\r\n    cancel_at_period_end: s.cancel_at_period_end ? 'Yes' : 'No',\r\n    seats: s.seats,\r\n  }));\r\n  const activeSubsRows     = activeSubsRaw.map((s) => ({ ...s, user_email: userById[s.reference_id]?.email }));\r\n  const incompleteSubsRows = incompleteSubs.map((s) => ({ ...s, user_email: userById[s.reference_id]?.email }));\r\n\r\n  // Sorting\r\n  const handleSort = (table, key) =>\r\n    setSortConfig((prev) => {\r\n      if (prev.table !== table || prev.key !== key) return { table, key, direction: 'asc' };\r\n      if (prev.direction === 'asc') return { table, key, direction: 'desc' };\r\n      return { table: null, key: null, direction: null };\r\n    });\r\n\r\n  const sortIndicator = (table, key) => {\r\n    if (sortConfig.table === table && sortConfig.key === key) {\r\n      return sortConfig.direction === 'asc' ? ' ▲' : ' ▼';\r\n    }\r\n    return '';\r\n  };\r\n\r\n  const sortData = (arr, key, dir) => {\r\n    if (!key || !dir) return arr;\r\n    return [...arr].sort((a, b) => {\r\n      let av = a[key] ?? '';\r\n      let bv = b[key] ?? '';\r\n      const aN = parseFloat(av), bN = parseFloat(bv);\r\n      const bothNum = !isNaN(aN) && !isNaN(bN);\r\n      let cmp = bothNum ? aN - bN : String(av).localeCompare(String(bv), undefined, { numeric: true });\r\n      if (cmp === 0) return 0;\r\n      return dir === 'asc' ? (cmp < 0 ? -1 : 1) : (cmp < 0 ? 1 : -1);\r\n    });\r\n  };\r\n\r\n  const sortedUserRows = useMemo(\r\n    () =>\r\n      sortConfig.table === 'user_management'\r\n        ? sortData(userManagementRows, sortConfig.key, sortConfig.direction).map((r) => ({\r\n            user: { id: r.user_id, name: r.name, email: r.email, created_at: r.created_at, email_verified: r.email_verified === 'Yes' },\r\n            stats: r,\r\n            subscription: r,\r\n          }))\r\n        : userRows,\r\n    [sortConfig, userRows]\r\n  );\r\n\r\n  const sortedAllSubs = useMemo(\r\n    () => (sortConfig.table === 'all_subs' ? sortData(allSubsRows, sortConfig.key, sortConfig.direction) : allSubsRows),\r\n    [sortConfig, allSubsRows]\r\n  );\r\n\r\n  const sortedActiveSubsFinal = useMemo(\r\n    () =>\r\n      sortConfig.table === 'active_subs'\r\n        ? sortData(activeSubsRows, sortConfig.key, sortConfig.direction)\r\n        : activeSubsRows,\r\n    [sortConfig, activeSubsRows]\r\n  );\r\n\r\n  const sortedIncompleteSubsFinal = useMemo(\r\n    () =>\r\n      sortConfig.table === 'incomplete_subs'\r\n        ? sortData(incompleteSubsRows, sortConfig.key, sortConfig.direction)\r\n        : incompleteSubsRows,\r\n    [sortConfig, incompleteSubsRows]\r\n  );\r\n\r\n  const title = sections.find((s) => s.key === currentSection)?.name || '';\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <aside className=\"sidebar\">\r\n        <div className=\"brand\">Forge v2</div>\r\n        <div className=\"nav\">\r\n          {sections.map((s) => (\r\n            <div\r\n              key={s.key}\r\n              className={`sidebar-item${currentSection === s.key ? ' active' : ''}`}\r\n              onClick={() => setCurrentSection(s.key)}\r\n            >\r\n              {s.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </aside>\r\n\r\n      <main className=\"main\">\r\n        <div className=\"topbar\">\r\n          <div className=\"title\">{title}</div>\r\n        </div>\r\n\r\n        <section className=\"content\">\r\n          {loading ? (\r\n            <div className=\"loading\">Loading data…</div>\r\n          ) : currentSection === 'financials' ? (\r\n            <FinancialsPanel\r\n              subscriptions={allSubsRows}\r\n              userById={userById}\r\n              aggregated={aggregated}\r\n              proCount={proCount}\r\n              teamCount={teamCount}\r\n              estimatedRevenue={estimatedRevenue}\r\n              handleSort={handleSort}\r\n              sortIndicator={sortIndicator}\r\n              sortedActiveSubs={sortedActiveSubsFinal}\r\n              sortedIncompleteSubs={sortedIncompleteSubsFinal}\r\n              onDownloadAll={() => downloadCSV('subscriptions.csv', allSubsRows)}\r\n              onDownloadActive={() => downloadCSV('active_subscriptions.csv', activeSubsRows)}\r\n              onDownloadIncomplete={() => downloadCSV('incomplete_subscriptions.csv', incompleteSubsRows)}\r\n            />\r\n          ) : currentSection === 'statistics' ? (\r\n            <StatisticsPanel data={data} aggregated={aggregated} />\r\n          ) : currentSection === 'templates_list' ? (\r\n            <TemplatesPanel templates={templates} userById={userById} />\r\n          ) : (\r\n            <UserManagementPanel\r\n              sortedUserRows={sortedUserRows}\r\n              handleSort={handleSort}\r\n              sortIndicator={sortIndicator}\r\n              onDownloadUsers={() => downloadCSV('users.csv', userManagementRows)}\r\n            />\r\n          )}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}